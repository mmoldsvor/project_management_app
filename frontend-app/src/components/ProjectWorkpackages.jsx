import logo from '../logo.svg';
import '../App.css';
import {
    Button,
    Checkbox,
    FormControl,
    FormControlLabel,
    FormGroup,
    FormLabel,
    Radio,
    RadioGroup, TextField,
    Typography
} from "@mui/material";
import InfoDrawer from "./Drawer";
import {useLocation, useNavigate} from "react-router-dom";
import {useState} from "react";
import "../styles/Genereal.scss"
import DatePicker from "react-datepicker";
import "../styles/Datepicker.scss"
const info = "Project Type is one of the root characteristics of a project, which points its nature. Usually project type is a high-level definition of a project that helps to identify methodologies to be suitable, objects and resources to be involved into the project, and nature of products to be generated by this project. When an organization operates a conception of project type, this may indicate that this organization possesses different templates for different project types â€“ these templates package suitable elements and tools to plan, manage, and control every conventional type of projects. Projects are classified by the following categories (the major ones): "


export default function ProjectWorkpackages() {
    const {state} = useLocation()
    const navigate = useNavigate()
    const [userState, setUserState] = useState({

    })
    const [subDeliverables, setSubDeliverabes] = useState({})
    const [startdate, setStartDate] = useState(new Date());
    const [workpackages, setWorkpackages] = useState({})

    const changeHandler = (e) => {
        const oldValue = userState[e.target.name]
        if (oldValue === "on"){
            setUserState(prevState => {
                return {...prevState, [e.target.name] : "off"}
            })
        }
        else {
            setUserState(prevState => {
                return {...prevState, [e.target.name] : e.target.value}
            })
        }
    }

    const addWorkPackage = (name, duration, resources, sources = null, sourceRelation = null) => {
        const workpackage = {
            "duration": duration,
            "name": name,
            "resources": resources,
            "sources": sources
        }
        setWorkpackages(prevState => { return {...prevState, [name]: workpackage}})
    }

    return (
        <div className="general__outer_div">
            <FormGroup className={"general__checkbox_group"} onChange={changeHandler}>
                <FormLabel className="general__form_text">Which success criteria applies for you project?</FormLabel>
                <FormControlLabel control={<Checkbox className={"general__checkbox"} name="completeDate"/>} label="Completion date" />
                <FormControlLabel control={<Checkbox className={"general__checkbox"} name="quality"/>} label="Quality" />
                <FormControlLabel control={<Checkbox className={"general__checkbox"} name="cost"/>} label="Cost" />
                <FormControlLabel control={<Checkbox className={"general__checkbox"} name="satisfied"/>} label="Satisfied customer/user" />
                <FormControlLabel control={<Checkbox className={"general__checkbox"} name="valueCreation"/>} label="Value creation" />
                <FormControlLabel control={<Checkbox className={"general__checkbox"} name="happyParticipants"/>} label="Happy project participants" />
            </FormGroup>
            {userState?.completeDate === "on" && <div>
                <Typography variant="h5">
                    Choose completion date
                </Typography>
                <DatePicker selected={startdate} onChange={(date) => setStartDate(date)} />
            </div>}
            {userState?.quality === "on" && <TextField
                className="general__large_text_input"
                label="Quality"
                defaultValue=""
                name="qualityTextbox"
                inputProps={{
                    style: {
                        height: "200px",
                    },
                }}
                helperText="Please describe how you will assess the projects quaility"
                onChange={changeHandler}
            />}

            <Button
                variant="outlined"
                color={"secondary"}
                onClick={() => {
                    console.log(state)
                    navigate(state?.prevPage)
                }}
            >
                Back
            </Button>
        </div>
    );
}

